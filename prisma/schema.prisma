// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  emailVerified Boolean
  coins         Int           @default(0)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  bookmarks     Bookmark[]
  reviews       Review[]
  transactions  Transaction[]
  likes         Like[]

  @@map("user")
}

model Comic {
  id               String     @id @default(uuid())
  title            String
  slug             String     @unique
  alternativeTitle String?
  synopsis         String
  author           String
  coverImage       String
  genres           String[]
  status           String
  releaseYear      Int
  chapters         Chapter[]
  reviews          Review[]
  likes            Like[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  Bookmark         Bookmark[]

  @@map("comic")
}

model Novel {
  id               String     @id @default(uuid())
  title            String
  slug             String     @unique
  alternativeTitle String?
  synopsis         String
  author           String
  coverImage       String
  genres           String[]
  status           String
  releaseYear      Int
  chapters         Chapter[]
  reviews          Review[]
  likes            Like[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  Bookmark         Bookmark[]

  @@map("novel")
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  content   String
  isPremium Boolean  @default(false)
  price     Int      @default(12) // Coin price for premium chapters
  comicId   String?  @map("comic_id")
  novelId   String?  @map("novel_id")
  comic     Comic?   @relation(fields: [comicId], references: [id])
  novel     Novel?   @relation(fields: [novelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chapter")
}

model Bookmark {
  id      String  @id @default(uuid())
  userId  String  @map("user_id")
  comicId String? @map("comic_id")
  novelId String? @map("novel_id")
  user    User    @relation(fields: [userId], references: [id])
  comic   Comic?  @relation(fields: [comicId], references: [id])
  novel   Novel?  @relation(fields: [novelId], references: [id])

  @@map("bookmark")
}

model Review {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  comicId   String?  @map("comic_id")
  novelId   String?  @map("novel_id")
  rating    Int
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  comic     Comic?   @relation(fields: [comicId], references: [id])
  novel     Novel?   @relation(fields: [novelId], references: [id])
  createdAt DateTime @default(now())

  @@map("review")
}

model Like {
  id      String  @id @default(uuid())
  userId  String  @map("user_id")
  comicId String? @map("comic_id")
  novelId String? @map("novel_id")
  user    User    @relation(fields: [userId], references: [id])
  comic   Comic?  @relation(fields: [comicId], references: [id])
  novel   Novel?  @relation(fields: [novelId], references: [id])

  @@map("like")
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  orderId   String   @unique
  amount    Int
  type      String
  item      String
  status    String
  quantity  Int
  price     Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("transaction")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
